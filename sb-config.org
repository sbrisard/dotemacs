# -*- mode: org; coding: utf-8 -*-
#+TITLE: My emacs configuration file
#+AUTHOR: SÃ©bastien Brisard
#+CATEGORY: DOTEMACS

I use the literate programming paradigm for my emacs configuration. This file should therefore be loaded with =org-babel-load-file=. More information can be found here

  - [[http://irreal.org/blog/?p=2804][Literate Programming and Your Emacs Configuration]]
  - [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Literate emacs configuration with org mode]]
  - [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline188][Sacha Chua's Emacs configuration]]

* Magit
  :LOGBOOK:
  CLOCK: [2016-04-21 Thu 07:25]--[2016-04-21 Thu 08:25] =>  1:00
  :END:

From the [[https://magit.vc/about/][official website]]

#+BEGIN_QUOTE
Magit is an interface to the version control system [[https://git-scm.com/][Git]], implemented as an [[https://www.gnu.org/software/emacs][Emacs]] package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains.
#+END_QUOTE

** General configuration

Git project should not be handled by =vc=

#+BEGIN_SRC emacs-lisp
(delete 'Git vc-handled-backends)
#+END_SRC

Under windows, specify the path to =git=

#+BEGIN_SRC emacs-lisp
  (when windowsp (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin/"))
#+END_SRC

** Issues under Windows

*** Staging hunks/regions
    :LOGBOOK:
    CLOCK: [2016-04-08 Fri 08:15]--[2016-04-08 Fri 08:50] =>  0:35
    CLOCK: [2016-04-07 Thu 07:30]--[2016-04-07 Thu 08:00] =>  0:30
    CLOCK: [2016-04-06 Wed 08:20]--[2016-04-06 Wed 08:45] =>  0:25
    CLOCK: [2016-04-05 Tue 07:50]--[2016-04-05 Tue 08:05] =>  0:15
    :END:

From the [[https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.6.0.txt][release notes]] of version 2.6.0

#+BEGIN_QUOTE
Staging hunks/regions belonging to files with CRLF line endings on Windows (or, to be precise, when =default-process-coding-system= had CRLF end-of-line conversion) ended up erroneously staging changes with LF line endings.  Magit now ensures line endings are preserved by enforcing a =process-coding-system= with LF end-of-line conversion.  The new behavior may be disabled by setting the option =magit-process-ensure-unix-line-ending= to =nil=.
#+END_QUOTE

However, on my windows box, this new feature seems to cause the following error message

#+BEGIN_EXAMPLE
wrong-type-argument list utf-8
#+END_EXAMPLE

I therefore disable this feature

#+BEGIN_SRC emacs-lisp
  (setq magit-process-ensure-unix-line-ending nil)
#+END_SRC

*** Pushing from Magit
    :LOGBOOK:
    CLOCK: [2016-04-21 Thu 07:10]--[2016-04-21 Thu 07:25] =>  0:15
    :END:

From the [[https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows][official website]],

#+BEGIN_QUOTE
Windows does not have the concept of a PTY, so there is no way for Emacs to intercept password prompts from Git.
#+END_QUOTE

The solution that I adopted is to use =guit-gui--askpass=, even if it does not integrate well with emacs.

#+BEGIN_SRC emacs-lisp
  (when windowsp (setenv "GIT_ASKPASS" "git-gui--askpass"))
#+END_SRC

* AUCTeX and RefTeX
  :LOGBOOK:
  CLOCK: [2016-05-02 Mon 08:30]--[2016-05-02 Mon 09:10] =>  0:40
  CLOCK: [2016-04-29 Fri 07:35]--[2016-04-29 Fri 07:45] =>  0:10
  :END:

#+BEGIN_SRC emacs-lisp
(require 'tex)
#+END_SRC

** Braces and such

Turn on electric mode (closing braces are automatically inserted, see [[info:auctex#Insertion of Quotes, Dollars, and Braces][Insertion of Quotes, Dollars, and Braces]] in the AUCTeX doc). Typing =C-q= before entering the opening brace deactivates this feature.

#+BEGIN_SRC emacs-lisp
(setq LaTeX-electric-left-right-brace t)
(setq TeX-electric-math (quote ("\\(" . "\\)")))
#+END_SRC

** Multi-files projects

By default, assume that the file is a master file.

#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master t)
#+END_SRC

** UN_JOUR Files parsing

This section needs some love.

#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save nil)
  (setq TeX-parse-self t)
#+END_SRC

** Fontification of macros

See [[info:auctex#Fontification of macros][Fontification of macros]] in the AUCTeX doc.

#+BEGIN_SRC emacs-lisp
  (setq font-latex-match-reference-keywords '(("citeauthor" "*{")
                                              ("citetext" "{")
                                              ("citeyear" "{")
                                              ("citeyearpar" "{")
                                              ("citep" "*[{")
                                              ("citet" "*[{")
                                              ("citealt" "*[{")
                                              ("citealp" "*[{")))
#+END_SRC

** LaTeX processor

#+BEGIN_SRC emacs-lisp
  (setq LaTeX-command "latex")
  (setq-default TeX-PDF-mode t)
  (setq TeX-command "tex")
#+END_SRC

=TeX-next-error (C-c `)= sometimes fails. From the [[https://www.gnu.org/software/auctex/manual/auctex/FAQ.html][AUCTeX FAQ]]

#+BEGIN_QUOTE
When writing the log file, TeX puts information related to a file, including error
messages, between a pair of parentheses. AUCTeX determines the file where the error
happened by parsing the log file and counting the parentheses. This can fail when
there are other, unbalanced parentheses present.

As a workaround you can activate so-called file:line:error messages for the log file.
(Those are are easier to parse, but may lack some details.) Either you do this in the
configuration of your TeX system (consult its manual to see where this is) or you add
a command line switch to the (la)tex call, e.g. by customizing LaTeX-command-style or
TeX-command-list.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
#+END_SRC

** Support for SyncTeX

See [[info:auctex#Forward and Inverse Search][Forward and Inverse Search]] in the AUCTeX doc.

#+BEGIN_SRC emacs-lisp
  (setq TeX-source-correlate-method (quote synctex))
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-start-server t)
#+END_SRC

** A_FAIRE Viewers

Select the viewer depending on the platform. This should really go in the =custom-set-variables= section.

#+BEGIN_SRC emacs-lisp
  (cond (windowsp
         (add-to-list 'TeX-expand-list '("%(sumatra)" (lambda () (format "\"C:/opt/SumatraPDF-3.0/SumatraPDF.exe\""))))
         (add-to-list 'TeX-view-program-list '("SumatraPDF" "%(sumatra) -reuse-instance -forward-search %b %n %o"))
         (setq TeX-view-program-selection '((output-pdf "SumatraPDF"))))

        (darwinp
         (add-to-list 'TeX-expand-list '("%(skim)" (lambda () (format "/Applications/Skim.app/Contents/SharedSupport/displayline"))))
         (add-to-list 'TeX-view-program-list '("Skim" "%(skim) -r -b %n %o %b"))
         (setq TeX-view-program-selection '((output-pdf "Skim")))))
#+END_SRC

** RefTeX

#+BEGIN_SRC emacs-lisp
  (require 'reftex)

  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq reftex-load-hook (quote (imenu-add-menubar-index)))
  (setq reftex-mode-hook (quote (imenu-add-menubar-index)))
#+END_SRC

AUCTeX/RefTeX integration

#+BEGIN_SRC emacs-lisp
  (setq reftex-plug-into-AUCTeX t)
#+END_SRC

All labels are inserted automatically (no query).

#+BEGIN_SRC emacs-lisp
  (setq reftex-insert-label-flags (quote (nil nil)))
#+END_SRC

On calling =reftex-reference=, do not prompt for reference macro (=\ref=, =\pageref=, etc...).

#+BEGIN_SRC emacs-lisp
  (setq reftex-ref-macro-prompt nil)
#+END_SRC

* Avy
  :LOGBOOK:
  CLOCK: [2016-04-29 Fri 07:25]--[2016-04-29 Fri 07:35] =>  0:10
  CLOCK: [2016-03-21 Mon 08:15]--[2016-03-21 Mon 08:20] =>  0:05
  CLOCK: [2016-03-14 Mon 08:15]--[2016-03-14 Mon 08:40] =>  0:25
  :END:

From the [[https://github.com/abo-abo/avy][official website]]

#+BEGIN_QUOTE
=avy= is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] and [[https://github.com/Lokaltog/vim-easymotion][vim-easymotion]] - =avy= uses the same idea.
#+END_QUOTE

See also

  - [[http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Ace-jump-mode Is Dead, Long Live Avy]]
  - [[http://oremacs.com/2015/05/08/avy-0.1.0/][New on MELPA - avy]]

The key-chord "jj" is bound to =avy-goto-word-1=.

#+BEGIN_SRC emacs-lisp
  (setq avy-background t)
  (setq avy-keys (quote (113 115 100 102 103 104 106 107 108 109)))
  (key-chord-define-global "jj" #'avy-goto-word-1)
#+END_SRC

* Ace-window
  :LOGBOOK:
  CLOCK: [2016-05-09 Mon 08:40]--[2016-05-09 Mon 08:45] =>  0:05
  :END:

From the [[https://github.com/abo-abo/ace-window][official website]]

#+BEGIN_QUOTE
I'm sure you're aware of =other-window= command. While it's great for two windows, it quickly loses its value when there are more windows: you need to call it many times, and since it's not easily predictable, you have to check each time if you're in the window that you wanted.

Another approach is to use =windmove-left=, =windmove-up=, etc. These are fast and predictable. Their disadvantage is that they need 4 key bindings. The default ones are shift+arrows, which are hard to reach.

This package aims to take the speed and predictability of =windmove= and pack it into a single key binding, similar to =other-window=.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (require 'ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  (set-face-attribute 'aw-leading-char-face nil
  :foreground nil
  :inherit 'compilation-mode-line-fail)
#+END_SRC

* Maxima
  :LOGBOOK:
  CLOCK: [2016-05-09 Mon 08:45]--[2016-05-09 Mon 08:50] =>  0:05
  :END:

From the [[http://maxima.sourceforge.net/][official website]]

#+BEGIN_QUOTE
Maxima is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, sets, lists, vectors, matrices and tensors. Maxima yields high precision numerical results by using exact fractions, arbitrary-precision integers and variable-precision floating-point numbers. Maxima can plot functions and data in two and three dimensions.
#+END_QUOTE

The files for the maxima mode are not available on MELPA. They are packaged with the binaries. I defined the variable =sb-path-to-maxima-mode=, where the following files should be available

  - =maxima.el=
  - =maxima-font-lock.el=
  - ...

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path sb-path-to-maxima-mode)
  (autoload 'maxima-mode "maxima" "Major mode for writing Maxima programs" t)
  (autoload 'maxima "maxima" "Run Maxima interactively" t)
  (setq auto-mode-alist (cons '("\\.ma[cx]" . maxima-mode)
                              auto-mode-alist))
#+END_SRC

* Ido
  :LOGBOOK:
  CLOCK: [2016-05-09 Mon 08:50]--[2016-05-09 Mon 08:55] =>  0:05
  :END:

#+BEGIN_SRC emacs-lisp
  (ido-mode t)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-file-extensions-order (quote (".org" ".tex" ".bib" ".html" ".py")))
  (setq ido-ignore-extensions nil)
  (setq ido-ignore-files (quote ("\\`#"
                                 "\\`.#"
                                 "\\`\\.\\./"
                                 "\\`\\./"
                                 ".*~"
                                 ".*\\.aux\'"
                                 ".*\\.bbl\'"
                                 ".*\\.blg\'"
                                 ".*\\.bst\'"
                                 ".*\\.log\'"
                                 ".*\\.out\'"
                                 ".*\\.pdf\'"
                                 ".*\\.spl\'"
                                 ".*\\.synctex\\.gz\'"
                                 ".*\\.toc\'"
                                 ".*\\.o\'"
                                 ".*\\.so\'"
                                 ".*\\.a\'"
                                 ".*\\.elc\'"
                                 ".*\\.pyc\'"
                                 ".*\\.pyo\'"
                                 "\\.git/")))
#+END_SRC
