# -*- mode: org; coding: utf-8 -*-
#+TITLE: My emacs configuration file
#+AUTHOR: Sébastien Brisard
#+CATEGORY: DOTEMACS
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Introduction
  :LOGBOOK:
  CLOCK: [2016-09-15 Thu 08:25]--[2016-09-15 Thu 08:58] =>  0:33
  :END:

I use the literate programming paradigm for my emacs configuration. This file should therefore be loaded with =org-babel-load-file=. More information can be found here

  - [[http://irreal.org/blog/?p=2804][Literate Programming and Your Emacs Configuration]]
  - [[https://www.mfoot.com/blog/2015/11/22/literate-emacs-configuration-with-org-mode/][Literate emacs configuration with org mode]]
  - [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline188][Sacha Chua's Emacs configuration]]
  - [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to literate programming]]

This file should be saved in =~/.emacs.d= (for example, as =~/.emacs.d/sb-init.el=). The most natural way to load this file would probably be to append the following line at the bottom of =~/.emacs.d/init.el=

#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file (concat user-emacs-directory "sb-init.org"))
#+END_SRC

However, this leads to a conflict, since this call to =org-babel-load-file= will load the built-in version of Orgmode, since =package-initialize= has not been loaded yet. This results in a [[http://orgmode.org/worg/org-faq.html#mixed-install][mixed installation]]. I prefer to tangle this file manually, and append the following line at the bottom of =~/.emacs.d/init.el=

#+BEGIN_SRC emacs-lisp :tangle no
  (load-file (concat user-emacs-directory "sb-init.el"))
#+END_SRC

Tangling can be triggered by calling =org-babel-tangle-file= (=C-c C-v t=).

* Miscellaneous
  :LOGBOOK:
  CLOCK: [2016-09-05 Mon 08:30]--[2016-09-05 Mon 08:40] =>  0:10
  :END:

** Coding system

Use UTF-8 preferably.

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system 'utf-8)
#+END_SRC

** A_FAIRE À classer
   :LOGBOOK:
   CLOCK: [2016-09-15 Thu 07:15]--[2016-09-15 Thu 07:22] =>  0:07
   :END:

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
  (setq confirm-nonexistent-file-or-buffer t)
  (setq dnd-open-file-other-window nil)
  (setq find-file-run-dired nil)
  (setq inhibit-startup-screen t)
  (setq initial-frame-alist '((top . 0) (left . 0)))
  (setq make-backup-files nil)
  (setq ps-paper-type (quote a4))
  (setq safe-local-variable-values (quote ((buffer-auto-save-file-name)
                                           (org-confirm-babel-evaluate))))
  (setq visible-bell t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;(setq-default buffer-file-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)

  (global-auto-revert-mode)
  (global-hl-line-mode)
  (menu-bar-mode)
  ;(scroll-bar-mode -1)
  (show-paren-mode)
  (tool-bar-mode -1)

  (global-unset-key (kbd "<C-next>"))
  (global-unset-key (kbd "<C-prior>"))
#+END_SRC

* Functions and variables to be used in this file
  :LOGBOOK:
  CLOCK: [2016-09-15 Thu 07:28]--[2016-09-15 Thu 07:46] =>  0:18
  CLOCK: [2016-09-05 Mon 08:15]--[2016-09-05 Mon 08:30] =>  0:15
  CLOCK: [2016-08-23 Tue 07:45]--[2016-08-23 Tue 07:50] =>  0:05
  :END:

** Dedicated custom group

The custom group SB gathers some variables which must be set locally.

#+BEGIN_SRC emacs-lisp
  (defgroup sb nil "My customization group" :tag "SB")

  (defcustom sb-path-to-local-documents "~/Documents"
    "Path to the documents directory.

  It is in particular assumed that

    - my org notes are located in the notes/ subdirectory,
    - my blog files are located in the blog/ subdirectory.

  Under Linux, this variable might be set to

      /home/username/Documents

  while under Windows, it might be set to

      C:\\Users\\username\\Documents

  In most cases, the default value

      ~/Documents

  should work."
    :type 'string :group 'sb :tag "Path to local documents")
#+END_SRC

** Load a file only when it exists

#+BEGIN_SRC emacs-lisp
  (defun sb-load-file-when-exists (filename)
    "Load specified file if it exists. Do nothing otherwise."
    (when (file-exists-p filename) (load-file filename)))
#+END_SRC

** Toggle window dedication

See [[http://stackoverflow.com/questions/5151620/how-do-i-make-this-emacs-frame-keep-its-buffer-and-not-get-resized][stack overflow]]

#+BEGIN_SRC emacs-lisp
  (defun sb-toggle-window-dedicated ()
    "Toggle whether the current active window is dedicated or not."
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window
                                   (not (window-dedicated-p window))))
         "Window '%s' is dedicated"
       "Window '%s' is normal")
     (current-buffer)))
#+END_SRC

** Bind newline and indent to RET

In programming mode, it can be inconvenient to use =C-j= to call =newline-and-indent=.

#+BEGIN_SRC emacs-lisp
  (defun sb-bind-newline-and-indent-to-RET ()
    "Bind newline-and-indent to RET.

  This function can be used as a hook."
    (local-set-key (kbd "RET") 'newline-and-indent))
#+END_SRC

* Platform dependent settings

** Predicates
   :LOGBOOK:
   CLOCK: [2016-09-15 Thu 07:22]--[2016-09-15 Thu 07:25] =>  0:03
   :END:

These predicates allow to assert the platform on which emacs currently runs.

#+BEGIN_SRC emacs-lisp
  (defvar windowsp (string-equal "windows-nt" (symbol-name system-type)))
  (defvar darwinp (string-equal "darwin" (symbol-name system-type)))
  (defvar linuxp (string-equal "gnu/linux" (symbol-name system-type)))
#+END_SRC

** Linux settings

** Mac OS X settings

Under Mac OS X, right-alt must be mapped to Alt Gr.

#+BEGIN_SRC emacs-lisp
  (when darwinp
    (setq mac-option-modifier 'none)
    (setq mac-command-modifier 'meta))
#+END_SRC

** Windows settings

* Various packages

** Emacs Lisp Package Archive (ELPA)

Various repositories are configured.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("elpy" . "http://jorgenschaefer.github.io/packages/")))
  (package-initialize)
#+END_SRC

** Others

=htmlize= is used by [[#ORG_MODE][Org mode]] for fontification of code blocks.

#+BEGIN_SRC emacs-lisp
  (require 'htmlize)
#+END_SRC

*** A_FAIRE Remove f dependency

#+BEGIN_SRC emacs-lisp
  (require 'f)
#+END_SRC

* Navigation

Some interesting references

  - [[http://irreal.org/blog/?p%3D5309][Defining a Keymap Prefix (Ireal)]]

** Default directory
   :LOGBOOK:
   CLOCK: [2016-08-17 Wed 08:30]--[2016-08-17 Wed 08:40] =>  0:10
   :END:

Default directory is retrieved programmatically from the environment variable =HOME=

#+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
#+END_SRC

** Key-chord mode

From the [[http://www.emacswiki.org/emacs/KeyChord][Emacs Wiki]]

#+BEGIN_QUOTE
Key-chord lets you bind commands to combination of key-strokes. Here a “key chord” means two keys pressed simultaneously, or a single key quickly pressed twice.
#+END_QUOTE

See also some recommendations on [[https://www.reddit.com/r/emacs/comments/3ricev/tip_for_when_you_are_running_out_of_easytopress/][reddit]].

#+BEGIN_SRC emacs-lisp
  (key-chord-mode 1)
#+END_SRC

** Avy
   :LOGBOOK:
   CLOCK: [2016-04-29 Fri 07:25]--[2016-04-29 Fri 07:35] =>  0:10
   CLOCK: [2016-03-21 Mon 08:15]--[2016-03-21 Mon 08:20] =>  0:05
   CLOCK: [2016-03-14 Mon 08:15]--[2016-03-14 Mon 08:40] =>  0:25
   :END:

From the [[https://github.com/abo-abo/avy][official website]]

#+BEGIN_QUOTE
=avy= is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] and [[https://github.com/Lokaltog/vim-easymotion][vim-easymotion]] - =avy= uses the same idea.
#+END_QUOTE

See also

  - [[http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Ace-jump-mode Is Dead, Long Live Avy]]
  - [[http://oremacs.com/2015/05/08/avy-0.1.0/][New on MELPA - avy]]

The key-chord "jj" is bound to =avy-goto-word-1=.

#+BEGIN_SRC emacs-lisp
  (setq avy-background t)
  (setq avy-keys (quote (113 115 100 102 103 104 106 107 108 109)))
  (key-chord-define-global "jj" #'avy-goto-word-1)
#+END_SRC

** Ace-window
   :LOGBOOK:
   CLOCK: [2016-05-09 Mon 08:40]--[2016-05-09 Mon 08:45] =>  0:05
   :END:

From the [[https://github.com/abo-abo/ace-window][official website]]

#+BEGIN_QUOTE
I'm sure you're aware of =other-window= command. While it's great for two windows, it quickly loses its value when there are more windows: you need to call it many times, and since it's not easily predictable, you have to check each time if you're in the window that you wanted.

Another approach is to use =windmove-left=, =windmove-up=, etc. These are fast and predictable. Their disadvantage is that they need 4 key bindings. The default ones are shift+arrows, which are hard to reach.

This package aims to take the speed and predictability of =windmove= and pack it into a single key binding, similar to =other-window=.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (require 'ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  (set-face-attribute 'aw-leading-char-face nil
  :foreground nil
  :inherit 'compilation-mode-line-fail)
#+END_SRC

** Zap to char vs. zap up to char
   :LOGBOOK:
   CLOCK: [2016-06-15 Wed 08:00]--[2016-06-15 Wed 08:15] =>  0:15
   :END:

=zap-to-char= (bound to =M-z=) kills up to and including the specified char. =misc.el= provides an alternative function, namely =zap-up-to-char= which does not remove the specified char. However, =misc.el= is not loaded by default.

#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.")
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC

** Hydra
   :LOGBOOK:
   CLOCK: [2016-08-18 Thu 06:30]--[2016-08-18 Thu 06:40] =>  0:10
   CLOCK: [2016-06-30 Thu 07:15]--[2016-06-30 Thu 07:40] =>  0:25
   CLOCK: [2016-06-30 Thu 05:45]--[2016-06-30 Thu 06:25] =>  0:40
   CLOCK: [2016-06-28 Tue 08:05]--[2016-06-28 Tue 09:20] =>  1:15
   :END:

From the [[https://github.com/abo-abo/hydra][repository]]

#+BEGIN_QUOTE
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
#+END_QUOTE

See also

  - [[http://ericjmritz.name/2015/10/14/some-personal-hydras-for-gnu-emacs/][Some Personal Hydras for GNU Emacs]]
  - [[http://oremacs.com/2016/04/04/hydra-doc-syntax/][Extended syntax for hydra docstrings]]

We first define a hydra to insert various types of arrows.

#+BEGIN_SRC emacs-lisp
  (defhydra sb-hydra-insert-char-arrow (:exit t :columns 4 :foreign-keys nil)
    "Insert arrow"
    ("<left>" (insert-char #x2190) "←")
    ("<up>" (insert-char #x2191) "↑")
    ("<right>" (insert-char #x2192) "→")
    ("<down>" (insert-char #x2193) "↓")
    ("S-<left>" (insert-char #x21D0) "⇐")
    ("S-<up>" (insert-char #x21D1) "⇑")
    ("S-<right>" (insert-char #x21D2) "⇒")
    ("S-<down>" (insert-char #x21D3) "⇓")
    ("C-<left>" (insert-char #x21A4) "↤")
    ("C-<up>" (insert-char #x21A5) "↥")
    ("C-<right>" (insert-char #x21A6) "↦")
    ("C-<down>" (insert-char #x21A7) "↧")
    ("M-<left>" (insert-char #x219E) "↞")
    ("M-<up>" (insert-char #x219F) "↟")
    ("M-<right>" (insert-char #x21A0) "↠")
    ("M-<down>" (insert-char #x21A1) "↡")
    ("C-g" nil "quit"))
#+END_SRC

Then, a hydra to insert Greek chars.

#+BEGIN_SRC emacs-lisp
  (defhydra sb-hydra-insert-char-greek (:exit t :columns 8 :foreign-keys nil)
    "Insert Greek char"
    ("A" (insert-char #x0391) "Α")
    ("B" (insert-char #x0392) "Β")
    ("G" (insert-char #x0393) "Γ")
    ("D" (insert-char #x0394) "Δ")
    ("E" (insert-char #x0395) "Ε")
    ("Z" (insert-char #x0396) "Ζ")
    ("H" (insert-char #x0397) "Η")
    ("Q" (insert-char #x0398) "Θ")
    ("I" (insert-char #x0399) "Ι")
    ("K" (insert-char #x039A) "Κ")
    ("L" (insert-char #x039B) "Λ")
    ("M" (insert-char #x039C) "Μ")
    ("N" (insert-char #x039D) "Ν")
    ("X" (insert-char #x039E) "Ξ")
    ("O" (insert-char #x039F) "Ο")
    ("P" (insert-char #x03A0) "Π")
    ("R" (insert-char #x03A1) "Ρ")
    ("S" (insert-char #x03A3) "Σ")
    ("T" (insert-char #x03A4) "Τ")
    ("Y" (insert-char #x03A5) "Υ")
    ("F" (insert-char #x03A6) "Φ")
    ("C" (insert-char #x03A7) "Χ")
    ("J" (insert-char #x03A8) "Ψ")
    ("W" (insert-char #x03A9) "Ω")
    ("a" (insert-char #x03B1) "α")
    ("b" (insert-char #x03B2) "β")
    ("g" (insert-char #x03B3) "γ")
    ("d" (insert-char #x03B4) "δ")
    ("e" (insert-char #x03B5) "ε")
    ("z" (insert-char #x03B6) "ζ")
    ("h" (insert-char #x03B7) "η")
    ("q" (insert-char #x03B8) "θ")
    ("i" (insert-char #x03B9) "ι")
    ("k" (insert-char #x03BA) "κ")
    ("l" (insert-char #x03BB) "λ")
    ("m" (insert-char #x03BC) "μ")
    ("n" (insert-char #x03BD) "ν")
    ("x" (insert-char #x03BE) "ξ")
    ("o" (insert-char #x03BF) "ο")
    ("p" (insert-char #x03C0) "π")
    ("r" (insert-char #x03C1) "ρ")
    ("s" (insert-char #x03C3) "σ")
    ("M-s" (insert-char #x03C2) "ς")
    ("t" (insert-char #x03C4) "τ")
    ("y" (insert-char #x03C5) "υ")
    ("f" (insert-char #x03C6) "φ")
    ("c" (insert-char #x03C7) "χ")
    ("j" (insert-char #x03C8) "ψ")
    ("w" (insert-char #x03C9) "ω")
    ("C-g" nil "quit"))
#+END_SRC

The following hydra puts everything together, and is bound to =C-c 8= (note the similarity to =C-x 8=, which is bound to =insert-char=).

#+BEGIN_SRC emacs-lisp
  (defhydra sb-hydra-insert-char (:exit t :columns 1 :foreign-keys nil)
    "Insert special character"
    ("a" (sb-hydra-insert-char-arrow/body) "arrows")
    ("g" (sb-hydra-insert-char-greek/body) "greek")
    ("C-g" nil "quit"))

  (global-set-key (kbd "C-c 8") 'sb-hydra-insert-char/body)
#+END_SRC

** ibuffer
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:35]--[2016-08-19 Fri 07:40] =>  0:05
   :END:

From the [[https://www.emacswiki.org/emacs/IbufferMode][EmacsWiki]]

#+BEGIN_QUOTE
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired. The most important Ibuffer features are highlighting and various alternate layouts. Ibuffer is part of Emacs 22.
#+END_QUOTE

See also

  - [[https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/][Emacs Tip of the Day: Start Using IBuffer ASAP]]
  - [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][Tips for using Emacs Ibuffer]]

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** A_FAIRE [#C] Change sorting method

* Appearance

** Theme
   :LOGBOOK:
   CLOCK: [2016-08-23 Tue 07:50]--[2016-08-23 Tue 08:00] =>  0:10
   :END:

I use the [[https://github.com/bbatsov/zenburn-emacs][Zenburn theme]] when emacs is run in GUI mode.

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p) (load-theme 'zenburn t))
#+END_SRC

** A_FAIRE [#C] Frame size
   :LOGBOOK:
   CLOCK: [2016-09-15 Thu 07:26]--[2016-09-15 Thu 07:27] =>  0:01
   CLOCK: [2016-08-23 Tue 08:00]--[2016-08-23 Tue 08:10] =>  0:10
   :END:

The function [[elisp:(describe-function 'frame-monitor-attributes)][frame-monitor-attributes]] might be helpful to conditionally resize the main frame. See also [[http://stackoverflow.com/questions/16481984/get-width-of-current-monitor-in-emacs-lisp][Get width of current monitor in Emacs Lisp]].

#+BEGIN_SRC emacs-lisp
  (when window-system
    (split-window-right))
#+END_SRC

* Org Mode
  :PROPERTIES:
  :CUSTOM_ID: ORG_MODE
  :END:
  :LOGBOOK:
  CLOCK: [2016-09-22 Thu 13:10]--[2016-09-22 Thu 13:30] =>  0:20
  CLOCK: [2016-09-22 Thu 12:00]--[2016-09-22 Thu 13:00] =>  1:00
  CLOCK: [2016-08-30 Tue 08:10]--[2016-08-30 Tue 08:30] =>  0:20
  CLOCK: [2016-08-30 Tue 07:40]--[2016-08-30 Tue 08:05] =>  0:25
  CLOCK: [2016-08-29 Mon 07:30]--[2016-08-29 Mon 08:20] =>  0:50
  CLOCK: [2016-08-26 Fri 08:25]--[2016-08-26 Fri 08:50] =>  0:25
  CLOCK: [2016-08-25 Thu 08:35]--[2016-08-25 Thu 08:50] =>  0:15
  :END:

There we are! That's really the crux of this file! Configuring Org Mode is very complex. The various configurations are organized like the [[info:Org][Org Mode Manual]].

** [[info:Org#Introduction][Introduction]]

*** [[info:Org#Activation][Activation]]

Make agenda accessible from everywhere.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

** [[info:Org#Document structure][Document structure]]

*** [[info:Org#Visibility cycling][Visibility cycling]]

**** [[info:Org#Initial visibility][Initial visibility]]

Org files are not opened in folded mode.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded nil)
#+END_SRC

Wrap lines.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC

*** [[info:Org#Structure editing][Structure editing]]

Do not shift text to the left or right when promoting/demoting headlines.

#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC

** [[info:Org#Tables][Tables]]

*** [[info:Org#Built-in table editor][The built-in table editor]]

#+BEGIN_SRC emacs-lisp
  (setq org-table-copy-increment nil)
#+END_SRC

** [[info:Org#Hyperlinks][Hyperlinks]]

*** [[info:Org#Handling%20links][Handling links]]

Follow links in same window.

#+BEGIN_SRC emacs-lisp
  (setq org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame)
                                     (vm-imap . vm-visit-imap-folder-other-frame)
                                     (gnus . org-gnus-no-new-news)
                                     (file . find-file-other-window)
                                     (wl . wl-other-frame))))
#+END_SRC

** [[info:Org#TODO Items][TODO Items]]

*** [[info:Org#TODO%20extensions][Extended use of TODO keywords]]

**** [[info:Org#TODO%20types][TODO keywords as types]]

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "A_FAIRE" "EN_ATTENTE" "UN_JOUR" "|" "FAIT")
                            (sequence "A_LIRE" "|" "LU")
                            (sequence "A_VOIR" "|" "VU")
                            (sequence "TODO" "|" "DONE")))
#+END_SRC

*** [[info:Org#Progress logging][Progress logging]]

**** [[info:Org#Tracking TODO state changes][Tracking TODO state changes]]

#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

** [[info:Org#Dates and times][Dates and times]]

Make sure that timestamps appear in English.

#+BEGIN_SRC emacs-lisp
  (setq system-time-locale "C")
#+END_SRC

*** Clocking work time

**** The clock table

Time durations greater than 24h should not be converted in days.

#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format "%02d:%02d")
#+END_SRC

Remove ugly =\_= from the clock table.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "org-clock"
    '(defun org-clocktable-indent-string (level)
       "Return indentation string according to LEVEL.
  LEVEL is an integer.  Indent by two spaces per level above 1."
       (if (= level 1) ""
         (concat "→" (make-string (* 2 (- level 1)) 32)))))
#+END_SRC

#+RESULTS:
: org-clocktable-indent-string

** [[info:Org#Capture - Refile - Archive][Capture - Refile - Archive]]

*** [[info:Org#Archiving][Archiving]]

**** [[info:Org#Moving subtrees][Moving a tree to the archive file]]

Archived trees from =FILE.org= are moved to =sb-path-to-local-documents/notes/archives/FILE.org_archive=.

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location (f-join sb-path-to-local-documents "notes" "archives" "%s_archive::"))
#+END_SRC

** [[info:Org#Agenda views][Agenda views]]

Restore window configuration upon exiting agenda. Show agenda in the current window, keeping all other windows.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

*** [[info:Org#Agenda files][Agenda files]]

=*.org= and =*.txt= files are considered as agenda files. These files are looked for in

  - =~/.emacs.d= (this file!)
  - =sb-path-to-local-documents/notes= and its subdirectories (=archives= is excluded).

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-file-regexp "\\`[^.].*\\.\\(org\\|txt\\)\\'")
  (setq org-agenda-files
        (let ((root (f-join sb-path-to-local-documents "notes")))
          (append (list root user-emacs-directory)
                  (f-directories root (lambda (dir) (not (s-contains? "archives" dir)))))))
#+END_SRC

** [[info:Org#Exporting][Exporting]]

#+BEGIN_SRC emacs-lisp
  (setq org-html-htmlize-output-type 'css)
#+END_SRC

*** [[info:Org#Export settings][Export settings]]

#+BEGIN_SRC emacs-lisp
  (setq org-export-preserve-breaks nil)
  (setq org-export-time-stamp-file t)
  (setq org-export-with-archived-trees 'headline)
  (setq org-export-with-author t)
  (setq org-export-with-clocks nil)
  (setq org-export-with-creator 'comment)
  (setq org-export-with-date t)
  (setq org-export-with-drawers '(not "LOGBOOK"))
  (setq org-export-with-email nil)
  (setq org-export-with-emphasize t)
  (setq org-export-with-entities t)
  (setq org-export-with-fixed-width t)
  (setq org-export-with-footnotes t)
  (setq org-export-with-inlinetasks t)
  (setq org-export-with-planning nil)
  (setq org-export-with-priority nil)
  (setq org-export-with-section-numbers nil)
  (setq org-export-with-smart-quotes nil)
  (setq org-export-with-special-strings t)
  (setq org-export-with-statistics-cookies t)
  (setq org-export-with-sub-superscripts t)
  (setq org-export-with-tables t)
  (setq org-export-with-tags t)
  (setq org-export-with-tasks t)
  (setq org-export-with-timestamps t)
  (setq org-export-with-toc nil)
  (setq org-export-with-todo-keywords t)
#+END_SRC

** [[info:Org#Working with source code][Working with source code]]

*** [[info:Org#Editing source code][Editing source code]]

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** [[info:Org#Evaluating code blocks][Evaluating code blocks]]

Displayed inlined images are automatically updated after evaluating source blocks. This was suggested by [[https://github.com/gregsexton/ob-ipython][ob-ipython]].

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

*** [[info:Org#Languages][Languages]]

Enable languages for evaluation in source blocks.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '((C . t)
                                                           (python . t)
                                                           (maxima . t)))
#+END_SRC

** [[info:Org#Miscellaneous][Miscellaneous]]

*** [[info:Org#Code evaluation security][Code evaluation and security issues]]

This is potentially risky!

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** ob-ipython
   :LOGBOOK:
   CLOCK: [2016-08-31 Wed 05:50]--[2016-08-31 Wed 06:05] =>  0:15
   CLOCK: [2015-12-01 Tue 08:20]--[2015-12-01 Tue 08:45] =>  0:25
   CLOCK: [2015-11-24 Tue 07:45]--[2015-11-24 Tue 09:00] =>  1:15
   CLOCK: [2015-11-05 Thu 07:15]--[2015-11-05 Thu 08:15] =>  1:00
   CLOCK: [2015-11-03 Tue 08:00]--[2015-11-03 Tue 08:30] =>  0:30
   :END:

[[https://github.com/gregsexton/ob-ipython][ob-ipython]] provides org-babel integration with Jupyter for evaluation of (Python by default) code blocks.

The following commands invoke ob-ipython with a specific profile.

#+BEGIN_SRC emacs-lisp
  (require 'ob-ipython)
  (setq ob-ipython-kernel-extra-args (quote ("--profile=ob-ipython")))
#+END_SRC

For the anaconda distribution, the package =jupyter_console= must be installed. The =ob-ipython= Jupyter profile was created as follows

#+BEGIN_EXAMPLE
ipython profile create ob-ipython
#+END_EXAMPLE

The config file is then located in =~/.ipython/profile_ob-ipython/ipython_config.py=. Its contents is reproduced below.

#+BEGIN_SRC python
  c.InteractiveShellApp.exec_lines = [
      'import matplotlib.pyplot as plt',
      'import numpy as np',
      'plt.style.use("zenburn")',
  ]

  c.InteractiveShellApp.matplotlib = 'inline'
  c.TerminalIPythonApp.display_banner = False
#+END_SRC

A zenburn stylesheet was also created for Matplotlib. File =~/.matplotlib/stylelib/zenburn.mplstyle= is reproduced below

#+BEGIN_EXAMPLE
text.color : dcdccc
axes.facecolor : 3f3f3f
axes.edgecolor : dcdccc
axes.labelcolor : dcdccc
axes.color_cycle : 8cd0d3,7f9f7f,cc9393,93e0e3,dc8cc3,f0dfaf, dcdccc
xtick.color : dcdccc
ytick.color : dcdccc
#+END_EXAMPLE

* Magit
  :LOGBOOK:
  CLOCK: [2016-04-21 Thu 07:25]--[2016-04-21 Thu 08:25] =>  1:00
  :END:

From the [[https://magit.vc/about/][official website]]

#+BEGIN_QUOTE
Magit is an interface to the version control system [[https://git-scm.com/][Git]], implemented as an [[https://www.gnu.org/software/emacs][Emacs]] package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains.
#+END_QUOTE

This interesting video, [[https://www.youtube.com/watch?v%3DvQO7F2Q9DwA][Magit Introduction and Demonstration]] illustrates /rebasing/. The author recommends the following key binding

#+BEGIN_SRC elisp :eval never :tangle no
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)a
#+END_SRC

See also [[https://www.youtube.com/watch?v=mtliRYQd0j4&feature=youtu.be][Rewrite git history with Emacs, magit and git rebase]]. This [[https://www.reddit.com/r/emacs/comments/3w2yo8/magit_key_commands_changed/][reddit thread]] discusses the recent changes to magit.

** General configuration

Git project should not be handled by =vc=

#+BEGIN_SRC emacs-lisp
(delete 'Git vc-handled-backends)
#+END_SRC

Under windows, specify the path to =git=

#+BEGIN_SRC emacs-lisp
  (when windowsp (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin/"))
#+END_SRC

** Issues under Windows

*** Staging hunks/regions
    :LOGBOOK:
    CLOCK: [2016-04-08 Fri 08:15]--[2016-04-08 Fri 08:50] =>  0:35
    CLOCK: [2016-04-07 Thu 07:30]--[2016-04-07 Thu 08:00] =>  0:30
    CLOCK: [2016-04-06 Wed 08:20]--[2016-04-06 Wed 08:45] =>  0:25
    CLOCK: [2016-04-05 Tue 07:50]--[2016-04-05 Tue 08:05] =>  0:15
    :END:

From the [[https://raw.githubusercontent.com/magit/magit/master/Documentation/RelNotes/2.6.0.txt][release notes]] of version 2.6.0

#+BEGIN_QUOTE
Staging hunks/regions belonging to files with CRLF line endings on Windows (or, to be precise, when =default-process-coding-system= had CRLF end-of-line conversion) ended up erroneously staging changes with LF line endings.  Magit now ensures line endings are preserved by enforcing a =process-coding-system= with LF end-of-line conversion.  The new behavior may be disabled by setting the option =magit-process-ensure-unix-line-ending= to =nil=.
#+END_QUOTE

However, on my windows box, this new feature seems to cause the following error message

#+BEGIN_EXAMPLE
wrong-type-argument list utf-8
#+END_EXAMPLE

I therefore disable this feature

#+BEGIN_SRC emacs-lisp
  (setq magit-process-ensure-unix-line-ending nil)
#+END_SRC

*** Pushing from Magit
    :LOGBOOK:
    CLOCK: [2016-04-21 Thu 07:10]--[2016-04-21 Thu 07:25] =>  0:15
    :END:

From the [[https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows][official website]],

#+BEGIN_QUOTE
Windows does not have the concept of a PTY, so there is no way for Emacs to intercept password prompts from Git.
#+END_QUOTE

The solution that I adopted is to use =guit-gui--askpass=, even if it does not integrate well with emacs.

#+BEGIN_SRC emacs-lisp
  (when windowsp (setenv "GIT_ASKPASS" "git-gui--askpass"))
#+END_SRC

** Use ido when calling magit-status with a prefix argument
:LOGBOOK:
CLOCK: [2016-09-24 Sat 06:25]--[2016-09-24 Sat 06:30] =>  0:05
CLOCK: [2016-09-24 Sat 05:55]--[2016-09-24 Sat 06:20] =>  0:25
CLOCK: [2016-09-23 Fri 08:25]--[2016-09-23 Fri 08:55] =>  0:30
CLOCK: [2016-09-15 Thu 08:08]--[2016-09-15 Thu 08:25] =>  0:17
:END:

When invoking =magit-status= with a prefix argument, magit prompts for a directory. It would be nice to have use ido to read the directory name. Here is a first attempt at advising =magit-read-repository= to do so

#+BEGIN_SRC emacs-lisp :tangle no
  (defadvice magit-read-repository (around sb-magit-read-repository activate)
    "Use `ido-read-directory-name' rather than `read-directory-name'."
    (if (or read-directory-name (not magit-repository-directories))
        (file-name-as-directory
         (ido-read-directory-name "Git repository: "
                                  (or (magit-toplevel) default-directory)))
      ad-do-it))
#+END_SRC

However, the above snippet does not work =:'(=. I will keep it for further reference, because while working on this issue, I have discovered the =magit-repository-directories= variable, which stores possible choices for =C-u M-x magit-status=; the following customization activates =ido= to navigate between these choices

#+BEGIN_SRC emacs-lisp
  (setq magit-completing-read-function (quote magit-ido-completing-read))
#+END_SRC

This requires the =ido-ubiquitous= package. I will start using this functionality and see if I am happy with it. What would be nice in particular is that magit suggests to add a repository to =magit-repository-directories= if it is not already present in this list.

* AUCTeX and RefTeX
  :LOGBOOK:
  CLOCK: [2016-06-03 Fri 08:30]--[2016-06-03 Fri 08:50] =>  0:20
  CLOCK: [2016-06-02 Thu 07:20]--[2016-06-02 Thu 09:00] =>  1:40
  CLOCK: [2016-05-25 Wed 08:10]--[2016-05-25 Wed 08:50] =>  0:40
  CLOCK: [2016-05-24 Tue 08:00]--[2016-05-24 Tue 09:30] =>  1:30
  CLOCK: [2016-05-02 Mon 08:30]--[2016-05-02 Mon 09:10] =>  0:40
  CLOCK: [2016-04-29 Fri 07:35]--[2016-04-29 Fri 07:45] =>  0:10
  :END:

#+BEGIN_SRC emacs-lisp
(require 'tex)
#+END_SRC

** Braces and such

Turn on electric mode (closing braces are automatically inserted, see [[info:auctex#Insertion of Quotes, Dollars, and Braces][Insertion of Quotes, Dollars, and Braces]] in the AUCTeX doc). Typing =C-q= before entering the opening brace deactivates this feature.

#+BEGIN_SRC emacs-lisp
(setq LaTeX-electric-left-right-brace t)
(setq TeX-electric-math (quote ("\\(" . "\\)")))
#+END_SRC

** Multi-files projects

By default, assume that the file is a master file.

#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master t)
#+END_SRC

** UN_JOUR Files parsing

This section needs some love.

#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save nil)
  (setq TeX-parse-self t)
#+END_SRC

** Fontification of macros

See [[info:auctex#Fontification of macros][Fontification of macros]] in the AUCTeX doc.

#+BEGIN_SRC emacs-lisp
  (setq font-latex-match-reference-keywords '(("citeauthor" "*{")
                                              ("citetext" "{")
                                              ("citeyear" "{")
                                              ("citeyearpar" "{")
                                              ("citep" "*[{")
                                              ("citet" "*[{")
                                              ("citealt" "*[{")
                                              ("citealp" "*[{")))
#+END_SRC

** LaTeX processor

#+BEGIN_SRC emacs-lisp
  (setq LaTeX-command "latex")
  (setq-default TeX-PDF-mode t)
  (setq TeX-command "tex")
#+END_SRC

=TeX-next-error (C-c `)= sometimes fails. From the [[https://www.gnu.org/software/auctex/manual/auctex/FAQ.html][AUCTeX FAQ]]

#+BEGIN_QUOTE
When writing the log file, TeX puts information related to a file, including error
messages, between a pair of parentheses. AUCTeX determines the file where the error
happened by parsing the log file and counting the parentheses. This can fail when
there are other, unbalanced parentheses present.

As a workaround you can activate so-called file:line:error messages for the log file.
(Those are are easier to parse, but may lack some details.) Either you do this in the
configuration of your TeX system (consult its manual to see where this is) or you add
a command line switch to the (la)tex call, e.g. by customizing LaTeX-command-style or
TeX-command-list.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
#+END_SRC

** Support for SyncTeX

See [[info:auctex#Forward and Inverse Search][Forward and Inverse Search]] in the AUCTeX doc.

#+BEGIN_SRC emacs-lisp
  (setq TeX-source-correlate-method (quote synctex))
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-start-server t)
#+END_SRC

** Viewers

We define =sb-TeX-pdf-viewer-command= which can be custom-set. This variable holds the full path to the PDF viewer, including the command line options (synctex and such). We use a custom =:set= function for the =sb-TeX-pdf-viewer-command= variable, in order to update =TeX-view-program-list=, which depends on it.

#+BEGIN_SRC emacs-lisp
  (defun sb-set-TeX-pdf-viewer-command (symbol value)
    "The function to be called when modifying `sb-TeX-pdf-viewer-command'
  when using the Customize user interface. This setter updates
  `TeX-view-program-list', taking care of duplicate entries."
    (progn (setq TeX-view-program-list
                 (cons (list "SB PDF viewer" value)
                       (cl-remove "SB PDF viewer" TeX-view-program-list
                                  :test (lambda (left right)
                                          (equal left (car right))))))
           (set-default symbol value)))

  (defcustom sb-TeX-pdf-viewer-command ""
    "Command line (including options) to be passed to `TeX-view'.
  For SumatraPDF (Windows platforms), set this variable to

      \"C:\\opt\\SumatraPDF-3.0\\SumatraPDF.exe
      -reuse-instance -forward-search %b %n %o\".

  For Skim (MacOS X platforms), set this variable to

      \"/Applications/Skim.app/Contents/SharedSupport/displayline
      -r -b %n %o %b\".
  "
    :type 'string
    :group 'sb
    :tag "TeX PDF viewer command"
    :set 'sb-set-TeX-pdf-viewer-command)

  (setq TeX-view-program-selection '((output-pdf "SB PDF viewer")))
#+END_SRC

** RefTeX
   :LOGBOOK:
   CLOCK: [2016-08-18 Thu 16:00]--[2016-08-18 Thu 16:30] =>  0:30
   :END:

#+BEGIN_SRC emacs-lisp
  (require 'reftex)

  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq reftex-load-hook (quote (imenu-add-menubar-index)))
  (setq reftex-mode-hook (quote (imenu-add-menubar-index)))
#+END_SRC

AUCTeX/RefTeX integration

#+BEGIN_SRC emacs-lisp
  (setq reftex-plug-into-AUCTeX t)
#+END_SRC

All labels but sections are inserted automatically (no query).

#+BEGIN_SRC emacs-lisp
  (setq reftex-insert-label-flags (quote ("s" "s")))
#+END_SRC

On calling =reftex-reference=, do not prompt for reference macro (=\ref=, =\pageref=, etc...).

#+BEGIN_SRC emacs-lisp
  (setq reftex-ref-macro-prompt nil)
#+END_SRC

Register axiom, theorem and remark environments so that they get properly numbered.

#+BEGIN_SRC emacs-lisp
  (setq reftex-label-alist
        '(("axiom"   ?a "ax:"  "~\\ref{%s}" nil ("axiom"   "ax.") -2)
          ("theorem" ?h "thr:" "~\\ref{%s}" nil   ("theorem" "th.") -3)
          ("remark" ?r "rem:" "~\\ref{%s}" t ("remark" "rem.") -4)))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (LaTeX-add-environments '("axiom" LaTeX-env-label)
                                                       '("theorem" LaTeX-env-label)
                                                       '("remark" LaTeX-env-label))))
#+END_SRC

** Insertion of references into a *.bib file
   :LOGBOOK:
   CLOCK: [2016-08-25 Thu 08:10]--[2016-08-25 Thu 08:35] =>  0:25
   :END:

I have created a function =sb-insert-bibref= which prompts for a key, and inserts a new BibTeX reference at point. This function is taylored to the way I store my references.

  1. Keys are formed as follows: =AUTHYYYY=, where =AUTH= are the first four letters of the first author, and =YYYY= is the year of publication. In case of identical keys, a letter (A, B, C) is added to the end.
  2. Keys are capitalized.
  3. Papers are stored in =sb-path-to-local-documents/biblio/a/authYYYY/=, where =a= denotes the first letter of the first author, and =auth= denotes the first four letters of the first author. Note that =a= and =auth= are /not/ capitalized.
  4. Each folder =sb-path-to-local-documents/biblio/a/authYYYY/= contains the paper itself (generally, =authYYYY.pdf=), along with a =*.bib= file (=authYYYY.bib=).

With these principles, implementation of =sb-insert-bibref= is straightforward.

#+BEGIN_SRC emacs-lisp
  (defun sb-bibref-path (key)
    "Return the path to a BibTeX file containing the specified KEY."
    (f-join sb-path-to-local-documents "biblio"
            (s-left 1 key) key (concat key ".bib")))

  (defun sb-insert-bibref (key)
    "Insert at point the BibTex file containing the specified KEY."
    (interactive "sBibTeX key: \n")
    (insert-file-contents (sb-bibref-path (downcase key))))
#+END_SRC

* Development

** C

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC

** Python
   :LOGBOOK:
   CLOCK: [2016-08-24 Wed 07:55]--[2016-08-24 Wed 08:25] =>  0:30
   :END:

I use Jorgen Schäfer's [[https://github.com/jorgenschaefer/elpy][elpy]] package.

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (setq elpy-modules (quote (elpy-module-eldoc
                             elpy-module-flymake
                             elpy-module-sane-defaults)))
  (setq elpy-test-runner (quote elpy-test-test-discover-runner))
  (add-hook 'elpy-mode-hook 'whitespace-mode)
#+END_SRC

It may be useful to set some other =elpy= variables. Since their value is platform dependent, I simply add them as a reminder to the "sb" =customize-group=.

#+BEGIN_SRC emacs-lisp
  (custom-add-to-group 'sb 'python-shell-interpreter-args 'custom-variable)
  (custom-add-to-group 'sb 'python-shell-interpreter-interactive-arg 'custom-variable)
#+END_SRC

*** A_FAIRE [#C] Should I use =sb-bind-newline-and-indent-to-RET=?

** Maxima
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:20]--[2016-08-19 Fri 07:35] =>  0:15
   CLOCK: [2016-05-09 Mon 08:45]--[2016-05-09 Mon 08:50] =>  0:05
   :END:

From the [[http://maxima.sourceforge.net/][official website]]

#+BEGIN_QUOTE
Maxima is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, sets, lists, vectors, matrices and tensors. Maxima yields high precision numerical results by using exact fractions, arbitrary-precision integers and variable-precision floating-point numbers. Maxima can plot functions and data in two and three dimensions.
#+END_QUOTE

The files for the maxima mode are not available on MELPA. They are packaged with the binaries, and I defined the variable =sb-path-to-maxima-mode=, where the relevant files are stored.

#+BEGIN_SRC emacs-lisp
  (defcustom sb-path-to-maxima-mode ""
    "Path to the folder hosting elisp files for maxima-mode.
  This is the path to the files: maxima.el, maxima-font-lock.el.
  "
    :type 'string :group 'sb :tag "Path to maxima-mode files")

  (add-to-list 'load-path sb-path-to-maxima-mode)
  (autoload 'maxima-mode "maxima" "Major mode for writing Maxima programs" t)
  (autoload 'maxima "maxima" "Run Maxima interactively" t)
  (setq auto-mode-alist (cons '("\\.ma[cx]" . maxima-mode)
                              auto-mode-alist))
#+END_SRC

* Ido

** ido itself
:LOGBOOK:
CLOCK: [2016-05-09 Mon 08:50]--[2016-05-09 Mon 08:55] =>  0:05
:END:

#+BEGIN_SRC emacs-lisp
  (ido-mode t)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-file-extensions-order (quote (".org" ".tex" ".bib" ".html" ".py")))
  (setq ido-ignore-extensions nil)
  (setq ido-ignore-files (quote ("\\`#"
                                 "\\`.#"
                                 "\\`\\.\\./"
                                 "\\`\\./"
                                 ".*~"
                                 ".*\\.aux\'"
                                 ".*\\.bbl\'"
                                 ".*\\.blg\'"
                                 ".*\\.bst\'"
                                 ".*\\.log\'"
                                 ".*\\.out\'"
                                 ".*\\.pdf\'"
                                 ".*\\.spl\'"
                                 ".*\\.synctex\\.gz\'"
                                 ".*\\.toc\'"
                                 ".*\\.o\'"
                                 ".*\\.so\'"
                                 ".*\\.a\'"
                                 ".*\\.elc\'"
                                 ".*\\.pyc\'"
                                 ".*\\.pyo\'"
                                 "\\.git/")))
#+END_SRC

** ido-ubiquitous
:LOGBOOK:
CLOCK: [2016-09-24 Sat 06:20]--[2016-09-24 Sat 06:25] =>  0:05
:END:

[[https://github.com/DarwinAwardWinner/ido-ubiquitous][ido-ubquitous]] replaces stock emacs completion with ido completion wherever it is possible to do so without breaking things.

#+BEGIN_SRC emacs-lisp
  (ido-ubiquitous-mode 1)
#+END_SRC

* Text editing

** Trailing whitespaces
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:40]--[2016-08-19 Fri 07:45] =>  0:05
   :END:

In selected modes, show trailing whitespaces and empty lines at the end of the buffer. This is defined as a mode hook (which requires a function).

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook (lambda() (setq show-trailing-whitespace t)))
#+END_SRC

In all modes, empty lines at the end of the buffer are shown, and trailing white spaces are removed when buffer is saved.

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Whitespace mode
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:45]--[2016-08-19 Fri 07:55] =>  0:10
   :END:

From the [[https://www.emacswiki.org/emacs/WhiteSpace][EmacsWiki]]: "This package is a minor mode to visualize blanks (TAB, (HARD) SPACE and NEWLINE)". Here are the UTF-8 values used below

|------------+-------------------------+---|
| Code point | Meaning                 |   |
|------------+-------------------------+---|
| U+0009     | TAB                     |   |
| U+000A     | LINE FEED               |   |
| U+0020     | SPACE                   |   |
| U+0024     | DOLLAR SIGN             | $ |
| U+002E     | FULL STOP               | . |
| U+003E     | GREATER THAN SIGN       | > |
| U+00B6     | PILCROW SIGN            | ¶ |
| U+00B7     | MIDDLE DOT              | · |
| U+2192     | RIGHTWARDS ARROW        | → |
| U+21E5     | RIGHTWARDS ARROW TO BAR | ⇥ |
| U+23CE     | RETURN SYMBOL           | ⏎ |
|------------+-------------------------+---|

#+BEGIN_SRC emacs-lisp
  (require 'whitespace)

  (setq whitespace-line-column 80)

  (setq whitespace-display-mappings
        '((space-mark #x0020  [#x00B7] [#x002E])
          (newline-mark #x00A [#x00B6 #x000A] [#x0024 #x000A])
          (tab-mark #x009 [#x2192 #x009] [#x003E #x009])
          ))

  (setq whitespace-style (quote (face lines-tail)))
#+END_SRC

* Easy PG (GnuPG interface for Emacs)

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
#+END_SRC

* Ispell

#+BEGIN_SRC emacs-lisp
  (setq ispell-dictionary "francais")
  (setq ispell-tex-skip-alists
        (list
         (append (car ispell-tex-skip-alists)
                 '(("\\\\cite"            ispell-tex-arg-end)
                   ("\\\\nocite"          ispell-tex-arg-end)
                   ("\\\\includegraphics" ispell-tex-arg-end)
                   ("\\\\author"          ispell-tex-arg-end)
                   ("\\\\ref"             ispell-tex-arg-end)
                   ("\\\\eqref"           ispell-tex-arg-end)
                   ("\\\\label"           ispell-tex-arg-end)
                   ("\\\\cite[tp]"        ispell-tex-arg-end)
                   ))
         (cadr ispell-tex-skip-alists)))
#+END_SRC

* Blog-related customizations
  :LOGBOOK:
  CLOCK: [2016-08-23 Tue 07:35]--[2016-08-23 Tue 07:45] =>  0:10
  :END:

#+BEGIN_SRC emacs-lisp
  (sb-load-file-when-exists (expand-file-name "blog/sb-blog.el"
                                              sb-path-to-local-documents))
#+END_SRC
