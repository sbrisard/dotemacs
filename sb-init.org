# -*- mode: org; coding: utf-8; fill-column: 79 -*-
#+TITLE: My emacs configuration file
#+AUTHOR: Sébastien Brisard
#+CATEGORY: DOTEMACS
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

#+BEGIN_SRC emacs-lisp
  ;; Vanilla emacs configuration
  ;; ===========================
  ;;
  (setq column-number-mode t
	confirm-nonexistent-file-or-buffer t
	default-input-method 'rfc1345
	default-directory (concat (getenv "HOME") "/")
	delete-active-region nil
	dnd-open-file-other-window nil
	find-file-run-dired nil
	indent-tabs-mode nil
	indicate-empty-lines nil
	inhibit-startup-screen t
	initial-frame-alist '((top . 0) (left . 0))
	make-backup-files nil
	ps-paper-type (quote a4)
	safe-local-variable-values (quote ((buffer-auto-save-file-name)
					   (org-confirm-babel-evaluate)))
	show-paren-style (quote expression)
	;; This ensures that Org timestamps allways appear in english
	system-time-locale "C"
	visible-bell t)
  ;;(setq-default buffer-file-coding-system 'utf-8)

  (global-auto-revert-mode)
  (global-hl-line-mode)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode)
  (tool-bar-mode -1)

  (global-unset-key (kbd "<C-next>"))
  (global-unset-key (kbd "<C-prior>"))

  ;; This is required for M-x package-list-packages to work properly
  (prefer-coding-system 'utf-8)

  ;; Useful functions and variables
  ;; ------------------------------

  (defconst sb-windows-p
    (string-equal "windows-nt" (symbol-name system-type))
    "t if the current system is Windows.")
  (defconst sb-darwin-p
    (string-equal "darwin" (symbol-name system-type))
    "t if the current system is Darwin.")
  (defconst sb-linux-p
    (string-equal "gnu/linux" (symbol-name system-type))
    "t if the current system is Linux")

  (defun sb-activate-default-input-method ()
    "Activate the default input method.

  Can be used as a hook."
    (activate-input-method default-input-method))

  (defun sb-bind-newline-and-indent-to-RET ()
    "Bind newline-and-indent to RET.

  This function can be used as a hook."
    (local-set-key (kbd "RET") 'newline-and-indent))

  (defun sb-load-file-when-exists (filename)
    "Load specified file if it exists. Do nothing otherwise."
    (when (file-exists-p filename) (load-file filename)))

  ;; Custom key bindings and keymaps
  ;; -------------------------------

  ;; Unlike zap-to-char (bound to M-z), zap-up-to-char kills up to, but
  ;; not including ARGth occurrence of CHAR. It is remapped to M-z.
  (autoload 'zap-up-to-char "misc")
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  ;; My personnal keymap is called `sb-map`, and the prefix key that is
  ;; assigned to this keymap is `C-&`.
  (define-prefix-command 'sb-map)
  (global-set-key (kbd "C-&") 'sb-map)

  ;; cycle-spacing is more flexible than just-one-space (initially bound
  ;; to M-SPC).
  (global-set-key (kbd "M-SPC") 'cycle-spacing)

  ;; Under Mac OS X, right-alt must be mapped to Alt Gr.
  (when sb-darwin-p (setq mac-option-modifier 'none
			  mac-command-modifier 'meta))

  ;; Definition of my own customization group
  ;; ----------------------------------------
  ;;
  (defgroup sb nil
    "My customization group.

  Gathers platform-dependent custom variables (both built-in and
  user-defined) that are required by my setup. These custom variables
  should be set at each new fresh install (but sensible defaults are
  defined)."
    :tag "sb")

  (defcustom sb-path-to-local-documents "~/Documents"
    "Path to the documents directory.

  It is in particular assumed that

    - my org notes are located in the notes/ subdirectory,
    - my blog files are located in the blog/ subdirectory.

  Under Linux, this variable might be set to

      /home/username/Documents

  while under Windows, it might be set to

      C:\\Users\\username\\Documents

  In most cases, the default value

      ~/Documents

  should work."
    :type 'string :group 'sb :tag "Path to local documents")

  (defcustom sb-path-to-bibliography "~/MyCoRe/biblio"
    "Path to the local bibliography.

  See `sb-insert-bibref' for more details."
    :type 'string :group 'sb :tag "Path to bibliography")

  ;; Remember to configure path to Julia program if necessary
  (custom-add-to-group 'sb 'julia-program 'custom-variable)

  ; Remember to configure proxy if necessary
  (custom-add-to-group 'sb 'url-proxy-services 'custom-variable)

  (custom-add-to-group 'sb 'python-shell-interpreter-args 'custom-variable)
  (custom-add-to-group 'sb 'python-shell-interpreter-interactive-arg 'custom-variable)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")
          ("melpa-stable" . "http://stable.melpa.org/packages/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")
          ;("org" . "https://orgmode.org/elpa/")
          ))
  (package-initialize)

  (defun sb-package-install-unless-installed (pkg)
    (unless (package-installed-p pkg) (package-install pkg)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (sb-package-install-unless-installed 'spacemacs-theme)
  (setq spacemacs-theme-org-height nil)
  (load-theme 'spacemacs-dark)

  (set-face-font 'default "DejaVu Sans Mono")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Used by Org mode for fontification of code blocks.
  (sb-package-install-unless-installed 'htmlize)
  (require 'htmlize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'sb-activate-default-input-method)
  (add-hook 'org-mode-hook 'sb-activate-default-input-method)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; ibuffer
  ;; -------

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-default-sorting-mode (quote filename/process)
	ibuffer-show-empty-filter-groups nil
	ibuffer-saved-filter-groups
	(quote
	 (("sb-ibuffer-groups"
	   ("Notes professionnelles" (filename . "notes/professionnelles"))
	   ("Notes personnelles" (filename . "notes/personnelles"))
	   ("HDR" (filename . "HDR"))
	   (".emacs" (filename . ".emacs.d"))))))
  (add-hook 'ibuffer-mode-hook
	    (lambda () (ibuffer-switch-to-saved-filter-groups
			"sb-ibuffer-groups")))
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-restore-windows-after-quit t
	org-agenda-window-setup 'current-window
	org-adapt-indentation nil
	org-confirm-babel-evaluate nil ; Potentially risky!
	org-duration-format (quote ((special . h:mm))) ; Don't display
						       ; long durations
						       ; in days.
	org-export-preserve-breaks nil
	org-export-time-stamp-file t
	org-export-with-archived-trees 'headline
	org-export-with-author t
	org-export-with-clocks nil
	org-export-with-creator 'comment
	org-export-with-date t
	org-export-with-drawers '(not "LOGBOOK")
	org-export-with-email nil
	org-export-with-emphasize t
	org-export-with-entities t
	org-export-with-fixed-width t
	org-export-with-footnotes t
	org-export-with-inlinetasks t
	org-export-with-planning nil
	org-export-with-priority nil
	org-export-with-section-numbers nil
	org-export-with-smart-quotes nil
	org-export-with-special-strings t
	org-export-with-statistics-cookies t
	org-export-with-sub-superscripts t
	org-export-with-tables t
	org-export-with-tags t
	org-export-with-tasks t
	org-export-with-timestamps t
	org-export-with-toc nil
	org-export-with-todo-keywords t
	org-html-htmlize-output-type 'css
	org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame)
				     (vm-imap . vm-visit-imap-folder-other-frame)
				     (gnus . org-gnus-no-new-news)
				     (file . find-file-other-window)
				     (wl . wl-other-frame)))
	org-log-into-drawer t
	org-src-fontify-natively t
	org-src-window-setup 'other-window
	org-startup-folded t
	org-startup-truncated nil
	org-table-copy-increment nil
	org-time-clocksum-format "%02d:%02d"
	org-todo-keywords '((sequence "A_FAIRE(a)" "EN_ATTENTE(e)" "UN_JOUR(u)"
				      "|" "FAIT(f)"))
	;; Agenda files are looked for in
	;; sb-path-to-local-documents/notes and its subdirectories.
	org-agenda-files (let ((root (expand-file-name "notes" sb-path-to-local-documents)))
			   (cons root (remove-if (lambda (name) (or (not (file-directory-p name))
								    (string-suffix-p ".git" name)))
						 (directory-files root t directory-files-no-dot-files-regexp)))))

  (global-set-key (kbd "C-c a") 'org-agenda)

  (eval-after-load "org-clock"
    '(defun org-clocktable-indent-string (level)
       "Return indentation string according to LEVEL.
  LEVEL is an integer.  Indent by two spaces per level above 1."
       (if (= level 1) ""
	 (concat "→" (make-string (* 2 (- level 1)) 32)))))


  ;; Displayed inlined images are automatically updated after evaluating
  ;; source blocks. Suggestion found on the ob-ipython website:
  ;;
  ;;     https://github.com/gregsexton/ob-ipython
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  (org-babel-do-load-languages 'org-babel-load-languages '((C . t)
							   (python . t)
							   (maxima . t)
							   (ipython . t)))
#+END_SRC

* ob-ipython

#+BEGIN_SRC emacs-lisp
  (require 'ob-ipython)
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp :eval never :tangle yes
  ;; Ensure that magit variables are properly defined and add relevant
  ;; variables to custom group
  (require 'magit)

  (custom-add-to-group 'sb 'magit-git-executable 'custom-variable)
  (custom-add-to-group 'sb 'magit-repository-directories 'custom-variable)

  (setq magit-process-ensure-unix-line-ending t)

  (global-set-key (kbd "C-x g") 'magit-status)
  (delete 'Git vc-handled-backends)
  (when sb-windows-p
    (add-to-list 'exec-path "C:/Program Files (x86)/Git/bin/")
    (setenv "GIT_ASKPASS" "git-gui--askpass"))


  (defun sb-git-stage-commit-and-push-all ()
    "Stage, commit and push all changes in current git repository.

  This function runs the following commands

      git commit -a -m msg
      git push

  The default commit message is \"DD/MM/YYYY HH:MM\". The gt
  push.default variable must be set.

  This function uses magit only to display the current status."
    (interactive)
    (shell-command (concat "git commit -a -m \""
				 (format-time-string "%d/%m/%Y %H:%M")
				 "\""))
    (shell-command "git push")
    (magit-status))

  (define-key sb-map (kbd "C") 'sb-git-stage-commit-and-push-all)
#+END_SRC

* AUCTeX and RefTeX

#+BEGIN_SRC emacs-lisp
  (require 'tex)

  (setq LaTeX-command "latex"
	LaTeX-electric-left-right-brace t
	TeX-auto-save nil
	TeX-command "tex"
	TeX-electric-math (quote ("\\(" . "\\)"))
	TeX-master t
	TeX-parse-self t
	TeX-PDF-mode t
	TeX-source-correlate-method (quote synctex)
	TeX-source-correlate-mode t
	TeX-source-correlate-start-server t)


  ;; TODO: is this really necessary?
  (setq font-latex-match-reference-keywords '(("citeauthor" "*{")
					      ("citetext" "{")
					      ("citeyear" "{")
					      ("citeyearpar" "{")
					      ("citep" "*[{")
					      ("citet" "*[{")
					      ("citealt" "*[{")
					      ("citealp" "*[{")))

  (add-to-list 'TeX-view-program-list
	       '("SumatraPDF"
		 ("C:\\opt\\SumatraPDF-3.1.2-64\\SumatraPDF.exe -reuse-instance -forward-search %b %n %o")
		 "C:\\opt\\SumatraPDF-3.1.2-64\\SumatraPDF.exe"))

  (add-to-list 'TeX-view-program-selection '(output-pdf "SumatraPDF"))

  (put 'TeX-view-program-list 'variable-documentation
       (concat (get 'TeX-view-program-list 'variable-documentation)
	       "\n\n------------------------------------------------------------------------\nNote (SB): for SumatraPDF (Windows platforms), set this variable to\n\n    \"C:\\opt\\SumatraPDF-3.0\\SumatraPDF.exe\n    -reuse-instance -forward-search %b %n %o\".\n\nFor Skim (MacOS X platforms), set this variable to\n\n    \"/Applications/Skim.app/Contents/SharedSupport/displayline\n    -r -b %n %o %b\".\n\nUpdate `TeX-view-program-selection' accordingly."))

  (setf TeX-view-program-selection
	(cons '(output-pdf "SumatraPDF")
	      (cl-remove 'output-pdf TeX-view-program-selection
			 :test (lambda (left right) (equal left (car right))))))

  (custom-add-to-group 'sb 'TeX-view-program-list 'custom-variable)
  (custom-add-to-group 'sb 'TeX-view-program-selection 'custom-variable)
#+END_SRC

* Development

** C

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC

** Python
:LOGBOOK:
CLOCK: [2018-01-30 Tue 08:00]--[2018-01-30 Tue 08:45] =>  0:45
CLOCK: [2016-11-17 Thu 07:35]--[2016-11-17 Thu 07:50] =>  0:15
CLOCK: [2016-08-24 Wed 07:55]--[2016-08-24 Wed 08:25] =>  0:30
CLOCK: [2014-08-07 Thu 13:55]--[2014-08-07 Thu 15:00] =>  1:05
CLOCK: [2014-08-07 Thu 07:30]--[2014-08-07 Thu 10:00] =>  2:30
CLOCK: [2014-08-05 Tue 07:30]--[2014-08-05 Tue 10:30] =>  3:00
:END:

#+BEGIN_SRC emacs-lisp
  (setq python-shell-completion-native-enable nil
	python-shell-interpreter "jupyter"
	python-shell-interpreter-args "console --simple-prompt"
	python-shell-prompt-detect-enabled nil
	python-shell-prompt-output-regexp "Out\\[[0-9]+\\]:"
	python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
  (add-hook 'python-mode-hook (lambda() (setq show-trailing-whitespace t)))
#+END_SRC

I use Jorgen Schäfer's [[https://github.com/jorgenschaefer/elpy][elpy]] package.

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (setq elpy-modules (quote (elpy-module-eldoc
                             elpy-module-flymake
                             elpy-module-sane-defaults)))
  (setq elpy-test-runner (quote elpy-test-test-discover-runner))
  (add-hook 'elpy-mode-hook 'whitespace-mode)
#+END_SRC

*** Other references

  - [[http://kitchingroup.cheme.cmu.edu/blog/2014/12/20/A-new-mode-for-Python-documentation/][A new mode for Python documentation]] : see in particular the Disqus comments.
  - [[https://bitbucket.org/jonwaltman/pydoc-info][pydoc-info]]

*** A_FAIRE Native completion problems
:LOGBOOK:
CLOCK: [2017-08-07 Mon 08:00]--[2017-08-07 Mon 08:45] =>  0:45
:END:

When running =M-x run-python", I get the following error message

#+BEGIN_EXAMPLE
Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support readline, yet ‘python-shell-completion-native’ was t and "ipython3" is not part of the ‘python-shell-completion-native-disabled-interpreters’ list. Native completions have been disabled locally.
#+END_EXAMPLE

A work around (under windows) seems to be

  1. Install =pyreadline=
  2. Set =python-shell-completion-native= to =t=
  3. Use simple prompt with Jupyter console: set =python-shell-interpreter-args= to

#+BEGIN_EXAMPLE
-i C:\\Users\\brisard\\Miniconda3\\Scripts\\jupyter-script.py console --simple-prompt
#+END_EXAMPLE

See also this [[https://github.com/jorgenschaefer/elpy/issues/887][bug report (elpy)]].

** Maxima
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:20]--[2016-08-19 Fri 07:35] =>  0:15
   CLOCK: [2016-05-09 Mon 08:45]--[2016-05-09 Mon 08:50] =>  0:05
   :END:

From the [[http://maxima.sourceforge.net/][official website]]

#+BEGIN_QUOTE
Maxima is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, sets, lists, vectors, matrices and tensors. Maxima yields high precision numerical results by using exact fractions, arbitrary-precision integers and variable-precision floating-point numbers. Maxima can plot functions and data in two and three dimensions.
#+END_QUOTE

The files for the maxima mode are not available on MELPA. They are packaged with the binaries, and I defined the variable =sb-path-to-maxima-mode=, where the relevant files are stored.

#+BEGIN_SRC emacs-lisp
  (defcustom sb-path-to-maxima-mode ""
    "Path to the folder hosting elisp files for maxima-mode.
  This is the path to the files: maxima.el, maxima-font-lock.el.
  "
    :type 'string :group 'sb :tag "Path to maxima-mode files")

  (add-to-list 'load-path sb-path-to-maxima-mode)
  (autoload 'maxima-mode "maxima" "Major mode for writing Maxima programs" t)
  (autoload 'maxima "maxima" "Run Maxima interactively" t)
  (setq auto-mode-alist (cons '("\\.ma[cx]" . maxima-mode)
                              auto-mode-alist))
#+END_SRC

* Text editing

** Whitespace mode
   :LOGBOOK:
   CLOCK: [2016-08-19 Fri 07:45]--[2016-08-19 Fri 07:55] =>  0:10
   :END:

From the [[https://www.emacswiki.org/emacs/WhiteSpace][EmacsWiki]]: "This package is a minor mode to visualize blanks (TAB, (HARD) SPACE and NEWLINE)". Here are the UTF-8 values used below

|------------+-------------------------+---|
| Code point | Meaning                 |   |
|------------+-------------------------+---|
| U+0009     | TAB                     |   |
| U+000A     | LINE FEED               |   |
| U+0020     | SPACE                   |   |
| U+0024     | DOLLAR SIGN             | $ |
| U+002E     | FULL STOP               | . |
| U+003E     | GREATER THAN SIGN       | > |
| U+00B6     | PILCROW SIGN            | ¶ |
| U+00B7     | MIDDLE DOT              | · |
| U+2192     | RIGHTWARDS ARROW        | → |
| U+21E5     | RIGHTWARDS ARROW TO BAR | ⇥ |
| U+23CE     | RETURN SYMBOL           | ⏎ |
|------------+-------------------------+---|

#+BEGIN_SRC emacs-lisp
  (require 'whitespace)

  (setq whitespace-line-column 80)

  (setq whitespace-display-mappings
        '((space-mark #x0020  [#x00B7] [#x002E])
          (newline-mark #x00A [#x00B6 #x000A] [#x0024 #x000A])
          (tab-mark #x009 [#x2192 #x009] [#x003E #x009])
          ))

  (setq whitespace-style (quote (face lines-tail)))
#+END_SRC

* Easy PG (GnuPG interface for Emacs)

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
#+END_SRC

* Ispell
:LOGBOOK:
CLOCK: [2016-12-06 Tue 08:25]--[2016-12-06 Tue 09:10] =>  0:45
CLOCK: [2016-12-05 Mon 08:30]--[2016-12-05 Mon 09:00] =>  0:30
:END:

The spell checker is selected through the =ispell-program-name= variable. The following code snippet sets the dictionary list for hunspell. However, on the first execution of =ispell= in an emacs session, an error is raised

#+BEGIN_EXAMPLE
split-string: Wrong type argument: stringp, nil
#+END_EXAMPLE

On trying again, ispell works like a charm.

#+BEGIN_SRC emacs-lisp
  (setq ispell-local-dictionary-alist (quote (("american"
                                               "[[:alpha:]]"
                                               "[^[:alpha:]]"
                                               "[']"
                                               t
                                               ("-d" "en_US")
                                               "~tex" undecided))))

  (setq ispell-dictionary "american")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ispell-tex-skip-alists
        (list
         (append (car ispell-tex-skip-alists)
                 '(("\\\\cite"            ispell-tex-arg-end)
                   ("\\\\nocite"          ispell-tex-arg-end)
                   ("\\\\includegraphics" ispell-tex-arg-end)
                   ("\\\\author"          ispell-tex-arg-end)
                   ("\\\\ref"             ispell-tex-arg-end)
                   ("\\\\eqref"           ispell-tex-arg-end)
                   ("\\\\label"           ispell-tex-arg-end)
                   ("\\\\cite[tp]"        ispell-tex-arg-end)
                   ))
         (cadr ispell-tex-skip-alists)))
#+END_SRC

* sb-passwd

This is a small package that I wrote in order to use management of
credentials, in particular creation/insertion of passwords.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/sb-passwd")
  (require 'sb-passwd)
  (sb-passwd-append-from-table
   (cdr (delq 'hline
              (sb-passwd-load-table-from-file
               (expand-file-name "notes/personnelles/mots_de_passe.gpg"
                                 sb-path-to-local-documents)
               "credentials"))) 0 1 2)

  (define-key sb-map (kbd "p") 'hydra-sb-passwd/body)
#+END_SRC

* Packages I should start to use

  - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
  - [[http://emacsthemes.com/][Emacs Themes]]

** Ivy, Counsel and Swiper
:LOGBOOK:
CLOCK: [2017-10-03 Tue 09:00]--[2017-10-03 Tue 09:20] =>  0:20
:END:

  - [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Ivy, Counsel and Swiper]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (ivy-mode 1)
  (counsel-mode 1)
  (setq ivy-case-fold-search-default (quote always))
#+END_SRC

** eyebrowse

[[https://github.com/wasamasa/eyebrowse][eyebrowse]] is a global minor mode for Emacs that allows you to manage
your window configurations in a simple manner, just like tiling window
managers like i3wm with their workspaces do. It displays their current
state in the modeline by default. The behaviour is modeled after
ranger, a file manager written in Python.

** IMenu

See also

  - [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]
  - [[https://www.wisdomandwonder.com/article/10358/easily-browse-imenu-entries-in-a-buffer][Easily Browse Imenu Entries In A Buffer]]
  - [[https://github.com/ancane/popup-imenu][Popup-imenu]]

** imenu-list
:LOGBOOK:
CLOCK: [2017-01-19 Thu 08:00]--[2017-01-19 Thu 08:10] =>  0:10
:END:

[[https://github.com/bmag/imenu-list][imenu-list]]

** Yasnippet

  - [[http://howardism.org/Technical/Emacs/templates-tutorial.html][Having Emacs Type for You]]
  - [[http://pragmaticemacs.com/emacs/email-templates-in-mu4e-with-yasnippet/][Email templates in mu4e with yasnippet]] (Pragmatic Emacs)
  - [[http://pragmaticemacs.com/emacs/multiple-choices-in-yasnippets/][Multiple choices in yasnippets]] (Pragmatic Emacs)

** Calfw - A calendar framework for Emacs

  - [[https://github.com/kiwanami/emacs-calfw][Calfw - A calendar framework for Emacs]]

** ggtags

  - [[https://github.com/leoliu/ggtags][Emacs frontend to GNU Global source code tagging system]]

** RSS
:LOGBOOK:
CLOCK: [2016-03-29 Tue 11:55]--[2016-03-29 Tue 13:55] =>  2:00
CLOCK: [2016-03-21 Mon 08:20]--[2016-03-21 Mon 09:00] =>  0:40
:END:

I have been exploring several options to read RSS threads from within emacs. =gnus= was the first choice. However, there are a few threads I failed to subscribe to.

I also gave up =newsticker= because

  - collection of new threads frequently fails,
  - the state (read/unread) threads is not saved frequently enough.

** Regular expressions

  - [[https://github.com/benma/visual-regexp.el][visual-regexp]] is like replace-regexp, but with live visual feedback directly in the buffer
  - [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] allows you to edit a grep buffer and apply those changes to the file buffer

** Raibow delimiters

From the [[http://www.emacswiki.org/emacs/RainbowDelimiters][EmacsWiki]]

#+BEGIN_QUOTE
RainbowDelimiters is a “rainbow parentheses”-like mode which highlights parens, brackets, and braces according to their depth. Each successive level is highlighted a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at the same depth.
#+END_QUOTE

** smex

[[https://github.com/nonsequitur/smex][Smex]] is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.

** crux

[[https://github.com/bbatsov/crux][crux]] is a Collection of Ridiculously Useful eXtensions for Emacs. crux bundles a few useful interactive commands to enhance your overall Emacs experience.

** dired-hacks

From [[https://github.com/Fuco1/dired-hacks][Github]]

#+BEGIN_QUOTE
Collection of useful dired additions. I don't want this become another dired+, so I'm splitting all the functionality into separate mutually independent packages. All shared functionality and helpers will be extracted into a single package dired-hacks-utils, so that will be the only dependence.
#+END_QUOTE

** icicles

  - [[http://www.emacswiki.org/emacs/Icicles_-_Nutshell_View][Icicles]]

** Hydra
:LOGBOOK:
CLOCK: [2016-08-18 Thu 06:30]--[2016-08-18 Thu 06:40] =>  0:10
CLOCK: [2016-06-30 Thu 07:15]--[2016-06-30 Thu 07:40] =>  0:25
CLOCK: [2016-06-30 Thu 05:45]--[2016-06-30 Thu 06:25] =>  0:40
CLOCK: [2016-06-28 Tue 08:05]--[2016-06-28 Tue 09:20] =>  1:15
:END:

From the [[https://github.com/abo-abo/hydra][repository]]

#+BEGIN_QUOTE
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
#+END_QUOTE

See also

  - [[http://ericjmritz.name/2015/10/14/some-personal-hydras-for-gnu-emacs/][Some Personal Hydras for GNU Emacs]]
  - [[http://oremacs.com/2016/04/04/hydra-doc-syntax/][Extended syntax for hydra docstrings]]

We first define a hydra to insert various types of arrows.

** Info mode

  - Learn about keystrokes
  - Sort manuals more conveniently

** undo-tree

  - [[https://www.emacswiki.org/emacs/UndoTree][EmacsWiki: Undo Tree]]

** expand-region

[[https://github.com/magnars/expand-region.el][expand-region]]

** wgrep

See [[http://oremacs.com/2015/01/27/my-refactoring-workflow/][this post]] on refactoring.

** zotxt

See [[https://gitlab.com/egh/zotxt][zotxt: a Zotero extension for text]]

#+BEGIN_QUOTE
zotxt is a Zotero extension for supporting utilities that deal with plain text files (e.g., markdown, reStructuredText, latex, etc.).
#+END_QUOTE

See also Michael Behr's blog post: [[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode]].

** rx (built-in package)

#+BEGIN_QUOTE
This is another implementation of sexp-form regular expressions.
It was unfortunately written without being aware of the Sregex
package coming with Emacs, but as things stand, Rx completely
covers all regexp features, which Sregex doesn't, doesn't suffer
from the bugs mentioned in the commentary section of Sregex, and
uses a nicer syntax (IMHO, of course :-).
#+END_QUOTE

See also

  - [[http://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/][Exploring Emacs rx Macro]]

** auth-source

  - [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]] (Mastering
    Emacs)

** winner-mode (built-in)

[[info:emacs#Window%20Convenience][Convenience Features for Window Handling]]

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in the
window configuration (i.e., how the frames are partitioned into
windows), so that you can undo them.
#+END_QUOTE

** dumb-jump

#+BEGIN_QUOTE
[[https://github.com/jacktasia/dumb-jump][dumb-jump]] is an Emacs "jump to definition" package with support for
multiple programming languages that favors "just working". This means
minimal -- and ideally zero -- configuration with absolutely no stored
indexes (TAGS) or persistent background processes. Dumb Jump requires
at least GNU Emacs 24.3.
#+END_QUOTE

** PDF tools

  - [[http://irreal.org/blog/?p=4727][PDF Tools for Emacs]] (Irreal)
  - [[https://codearsonist.com/reading-for-programmers][Reading for Programmers]]

* Blog-related customizations
  :LOGBOOK:
  CLOCK: [2016-08-23 Tue 07:35]--[2016-08-23 Tue 07:45] =>  0:10
  :END:

#+BEGIN_SRC emacs-lisp
  (sb-load-file-when-exists (expand-file-name "blog/sb-blog.el"
                                              sb-path-to-local-documents))
#+END_SRC
